# -*- coding: utf-8 -*-

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import TypeOfFileMismatch
from data.config import CHANNEL_ID
from loader import dp, bot
from statesgroup import CreateAd
from keyboards import ctypes, inline
from utils import format_data_to_content


@dp.callback_query_handler(ctypes.dog_breed.filter(breed="cancel"), state="*")
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.answer()


@dp.callback_query_handler(ctypes.back.filter(), state=CreateAd.get_sex)
async def back_to_get_breed(call: types.CallbackQuery, state: FSMContext):
    await CreateAd.get_breed.set()
    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É —Å–æ–±–∞–∫–∏\n\n" + \
            "<em>–õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é:</em>",
        reply_markup=inline.dogs_breed()
    )


@dp.callback_query_handler(ctypes.dog_breed.filter(), state=CreateAd.get_breed)
@dp.callback_query_handler(ctypes.back.filter(), state=CreateAd.get_age)
async def save_breed(call: types.CallbackQuery,
        callback_data : dict, state: FSMContext):

    async with state.proxy() as data:
        data['breed'] = callback_data.get('breed')

    await CreateAd.next()
    await call.message.edit_text(
        text="2Ô∏è‚É£ <b>–ü–æ–ª —Å–æ–±–∞–∫–∏</b>",
        reply_markup=inline.dog_sex(),
    )

    await call.answer()


@dp.callback_query_handler(ctypes.dog_sex.filter(), state=CreateAd.get_sex)
@dp.callback_query_handler(ctypes.back.filter(), state=CreateAd.get_price)
async def get_sex(call: types.CallbackQuery, callback_data: dict,
        state: FSMContext):

    await CreateAd.get_age.set()
    async with state.proxy() as data:
        data['sex'] = callback_data.get('sex')

    await call.message.edit_text(
        text="3Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç</b>\n\n" +\
            "<em>–õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:</em>",
        reply_markup=inline.dog_age(),
    )

    await call.answer()


@dp.callback_query_handler(ctypes.dog_age.filter(), state=CreateAd.get_age)
@dp.callback_query_handler(ctypes.back.filter(), state=CreateAd.get_pedigree)
async def get_age(call: types.CallbackQuery, callback_data: dict,
        state: FSMContext):

    await CreateAd.get_price.set()
    async with state.proxy() as data:
        data['age'] = callback_data.get('age')
    
    await call.message.edit_text(
        text="4Ô∏è‚É£<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤ USD:</b>",
        reply_markup=inline.get_price(),
    )


@dp.callback_query_handler(ctypes.dog_pedigree.filter(), state=CreateAd.get_pedigree)
@dp.callback_query_handler(ctypes.back.filter(), state=CreateAd.get_comment)
async def get_pedigree(call: types.CallbackQuery, callback_data: dict,
        state: FSMContext):

    await CreateAd.get_phone.set()
    async with state.proxy() as data:
        data['pedigree'] = callback_data.get('pedigree')

    await call.message.edit_text(
        text="6Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</b>",
        reply_markup=inline.get_phone(),
    )
    await call.answer()


@dp.callback_query_handler(ctypes.skip.filter(), state=CreateAd.get_comment)
async def skip_comment(call: types.CallbackQuery, state: FSMContext):
    await CreateAd.finish.set()
    async with state.proxy() as data:
        data['comment'] = ""


    await call.message.edit_text(
        text="<em>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ " +\
            "–∏\–∏–ª–∏ –≤–∏–¥–µ–æ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ</em> <b>–ó–ê–í–ï–†–®–ò–¢–¨ üî•!</b>",
        reply_markup=inline.finish()
    )


@dp.callback_query_handler(ctypes.back.filter(), state=CreateAd.finish)
async def back_to_get_comment(call: types.CallbackQuery, state: FSMContext):
    await CreateAd.get_comment.set()
    await call.message.edit_text(
        text="7Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>",
        reply_markup=inline.get_comment(),
    )


@dp.callback_query_handler(ctypes.finish.filter(), state=CreateAd.finish)
async def finish(call: types.CallbackQuery, callback_data: dict,
        state: FSMContext):
    
    async with state.proxy() as data:
        data['media'] = ""
        content = format_data_to_content(data)

    await call.message.answer(text="<b>–ó–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏—è!</b>")
    await call.message.answer(text=content)
    await call.message.answer(
        text="<b>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã—à–µ!</b>" + \
            "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ—Å—Ç –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É." + \
            "<em>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ.</em>",
        reply_markup=inline.confirm_upload()
    )


@dp.callback_query_handler(ctypes.confirm.filter(), state=CreateAd.finish)
async def upload(call: types.CallbackQuery, callback_data: dict,
        state: FSMContext):

    if callback_data['status'] == "no":
        await call.message.edit_text(
            text="<b>–°–æ–∑–¥–∞–Ω–∏–µ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>\n\n" + \
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–æ–π!"
        )
        await state.finish()
        return


    async with state.proxy() as data:
        content = format_data_to_content(data)
        media = data['media']
    
    if isinstance(media, types.MediaGroup):
        await bot.send_media_group(
            chat_id=CHANNEL_ID,
            media=media,
        )
        await state.finish()
        await call.message.edit_text(
            text="<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è ,–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n" + \
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–æ–π!"
        )
        return
    
    if media == "":
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=content,
        )
        await state.finish()
        await call.message.edit_text(
            text="<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è ,–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n" + \
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–æ–π!"
        )
        return
    
    try:
        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=media,
            caption=content,
        )
    except TypeOfFileMismatch:
        await bot.send_video(
            chat_id=CHANNEL_ID,
            video=media,
            caption=content
        )

    await call.message.edit_text(
        text="<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è ,–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n" + \
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–æ–π!"
    )
    await state.finish()