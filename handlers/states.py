# -*- coding: utf-8 -*-

from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp
from statesgroup import CreateAd
from keyboards import inline
from typing import List
from utils import format_data_to_content, get_media_group


@dp.message_handler(state=CreateAd.get_breed)
async def get_breed(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['breed'] = message.text

        await CreateAd.next()
        await message.answer(
            text="2Ô∏è‚É£ <b>–ü–æ–ª —Å–æ–±–∞–∫–∏</b>",
            reply_markup=inline.dog_sex(),
        )


@dp.message_handler(state=CreateAd.get_age)
async def get_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text

        await CreateAd.get_price.set()
        await message.answer(
            text="4Ô∏è‚É£<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤ USD:</b>",
            reply_markup=inline.get_price(),
        )

@dp.message_handler(state=CreateAd.get_pedigree)
async def get_pedigree(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pedigree'] = message.text

        await CreateAd.get_phone.set()
        await message.answer(
            text="6Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</b>",
            reply_markup=inline.get_phone(),
        )


@dp.message_handler(state=CreateAd.get_price)
async def get_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer(
            text="‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!" +\
            " –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ –ª–∏–±–æ –º–µ–Ω—å—à–µ 0!",
        )
        return
    
    if price <= 0:
        await message.answer(
            text="‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!" +\
            " –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ –ª–∏–±–æ –º–µ–Ω—å—à–µ 0!",
        )
        return

    await CreateAd.get_pedigree.set()
    async with state.proxy() as data:
        data['price'] = price
    
    await message.answer(
        text="5Ô∏è‚É£ <b>–í—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—É—é:</b>\n\n" + \
            "<em>–õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:</em>",
        reply_markup=inline.get_pedigree(),
    )


@dp.message_handler(state=CreateAd.get_phone)
async def get_phone(message: types.Message, state: FSMContext):
    await CreateAd.get_comment.set()
    async with state.proxy() as data:
        data['phone'] = message.text
    
    await message.answer(
        text="7Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>",
        reply_markup=inline.get_comment(),
    )


@dp.message_handler(state=CreateAd.get_comment)
async def get_comment(message: types.Message, state: FSMContext):
    await CreateAd.finish.set()
    async with state.proxy() as data:
        data['comment'] = message.text
    
    await message.answer(
        text="<em>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ " +\
            "–∏\–∏–ª–∏ –≤–∏–¥–µ–æ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ</em> <b>–ó–ê–í–ï–†–®–ò–¢–¨ üî•!</b>",
        reply_markup=inline.finish()
    )


@dp.message_handler(
    is_media_group=True, 
    content_types=types.ContentType.ANY,
    state=CreateAd.finish
)
async def handle_albums(message: types.Message, album: List[types.Message],
        state: FSMContext):
    async with state.proxy() as data:
        content = format_data_to_content(data)
        media_group = get_media_group(album, content)

        data['media'] = media_group

    await message.answer_media_group(media_group)


@dp.message_handler(content_types=['photo', 'video'], state=CreateAd.finish)
async def get_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        content = format_data_to_content(data)
    
        await message.answer(text="<b>–ó–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏—è!</b>")
        if message.photo:
            data['media'] = message.photo[-1].file_id
            await message.answer_photo(
                photo=message.photo[-1].file_id,
                caption=content,
            )
        
        if message.video:
            data['media'] = message.video.file_id
            await message.answer_video(
                video=message.video.file_id,
                caption=content,
            )
    
    await message.answer(
        text="<b>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã—à–µ!</b>" + \
            "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ—Å—Ç –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É." + \
            "<em>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ.</em>",
        reply_markup=inline.confirm_upload()
    )